// Composite

/*
 *  Intent:
 *  Composite is a structural design pattern that lets you compose objects into tree structures
 *  and then work with these structures as if they were individual objects.
 *  
 *  Composite became a pretty popular solution for the most problems that require building a tree structure. 
 *  Composite’s great feature is the ability to run methods recursively over the whole tree structure and sum up the results.
 * 
 *  Identification: 
 *  If you have an object tree, and each object of a tree is a part of the same class hierarchy, 
 *  this is most likely a composite. If methods of these classes delegate the work to child objects of the tree and do it via the base class/interface of the hierarchy,
 *  this is definitely a composite.
 * 
 */